name: Build and Push

on:
  push:
    branches:
      - dev
      - prod
      - feature/apply_as_example_service

jobs:
  check_lambda_files:
    name: Check Lambda source code
    outputs:
      run_job: ${{ steps.check_lambda_files.outputs.run_job }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Check modified AWS Lambda Source Code
        id: check_lambda_files
        working-directory: identity-lambda
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD

          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file
          do
            echo $file
            if [[ $file == identity-lambda/terraform/* || $file == .github/*  ]]; then
              echo "This modified file is not Lambda source code"
              echo "::set-output name=run_job::false"
              break
            else
              echo "::set-output name=run_job::true"
            fi
          done < files.txt

  codestyle:
    runs-on: ubuntu-latest
    needs: [ check_lambda_files ]
    if: needs.check_lambda_files.outputs.run_job == 'true'
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        with:
          components: rustfmt
      - uses: actions/checkout@v2
      - 
        working-directory: identity-lambda
        run: cargo fmt --all -- --check
      -
        working-directory: identity-app
        run: cargo fmt --all -- --check

  lint:
    runs-on: ubuntu-latest
    needs: [ check_lambda_files ]
    if: needs.check_lambda_files.outputs.run_job == 'true'
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        with:
          components: clippy
      - uses: actions/checkout@v2
      - 
        working-directory: identity-lambda
        run: cargo clippy --all-targets -- -D clippy::all
      -
        working-directory: identity-app
        run: cargo clippy --all-targets -- -D clippy::all

  compile:
    runs-on: ubuntu-latest
    needs: [ check_lambda_files ]
    if: needs.check_lambda_files.outputs.run_job == 'true'
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
      - uses: actions/checkout@v2
      - 
        working-directory: identity-lambda
        run: cargo check --all
      -
        working-directory: identity-app
        run: cargo check --all
  test:
    needs: [codestyle, lint, compile]
    runs-on: ubuntu-latest
    steps:
    - name: Setup Rust
      uses: hecrj/setup-rust-action@v1
    - name: Checkout
      uses: actions/checkout@v2
    - name: Test lambda
      working-directory: identity-lambda
      run: cargo test
    - name: Test components
      working-directory: identity-app
      run: cargo test

  # deploy on pushes to master branch
  # assumes aws credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY) are set in github secrets
  push_dev:
    if: github.ref == 'refs/heads/feature/apply_as_example_service'
#    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    env:
      TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
#    needs: [test]
    steps:
      - name: Install Musl-gcc
        run: |
          sudo apt update -y
          sudo apt install -y musl-tools
          sudo apt-get install pkg-config libssl-dev
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        with:
          targets: x86_64-unknown-linux-musl

      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Build and Push for Dev
        working-directory: identity-lambda
        run: |
          cargo build --release --target x86_64-unknown-linux-musl
          cp ./target/x86_64-unknown-linux-musl/release/test1 ./bootstrap && zip test1.zip bootstrap
          cp ./target/x86_64-unknown-linux-musl/release/test2 ./bootstrap && zip test2.zip bootstrap
          aws s3 cp ./test1.zip s3://891616054205-ap-southeast-1-aws-lambda/dev-sg-hocvienconggiao/${{ github.event.repository.name }}/latest/test1.zip
          aws s3 cp ./test2.zip s3://891616054205-ap-southeast-1-aws-lambda/dev-sg-hocvienconggiao/${{ github.event.repository.name }}/latest/test2.zip
      - name: Deploy Terraform Config 
        run: |
          chmod +x ./scripts/terraform-enterprise-push.sh
          ./scripts/terraform-enterprise-push.sh lambda/terraform HocVienCongGiao/dev-sg-lambda-services-hvcg-example-service

  push_prod:
    if: github.ref == 'refs/heads/feature/apply_as_example_service'
#    if: github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    env:
      TFE_TOKEN: ${{ secrets.TFE_TOKEN }}

    needs: [test]
    steps:
      - name: Install Musl-gcc
        run: |
          sudo apt update -y
          sudo apt install -y musl-tools

      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        with:
          targets: x86_64-unknown-linux-musl

      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Build and Push for Prod
        working-directory: identity-lambda
        run: |
          cargo build --release --target x86_64-unknown-linux-musl
          cp ./target/x86_64-unknown-linux-musl/release/test1 ./bootstrap && zip test1.zip bootstrap
          cp ./target/x86_64-unknown-linux-musl/release/test2 ./bootstrap && zip test2.zip bootstrap

          aws s3 cp ./test1.zip s3://891616054205-ap-southeast-1-aws-lambda/prod-sg-hocvienconggiao/${{ github.event.repository.name }}/latest/test1.zip
          aws s3 cp ./test2.zip s3://891616054205-ap-southeast-1-aws-lambda/prod-sg-hocvienconggiao/${{ github.event.repository.name }}/latest/test2.zip

#         aws s3 cp target/lambda/release/notification.zip s3://891616054205-ap-southeast-1-aws-lambda/terraform-api/latest/notification.zip          
#         aws s3 rm --recursive s3://479284709538-us-west-2-aws-lambda/terraform-api/latest

